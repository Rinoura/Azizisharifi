import tkinter as tk
import csv
import datetime

#کلاس کاربر
class User:
    def __init__(self , username , password , role , status):
        self.username = username
        self.password = password
        self.role = role
        self.status = status
#ورود کاربران
    def login(self):
        try:
            with open("users.csv" , "r") as file:
                reader = csv.reader(file)
                for row in reader:
                    if row[0] == self.username and row[1] == self.password:
                        return User(row[0] , row[1] , row[2] , row[3])
        except FileNotFoundError:
            return None 
        return None
    
#کلاس حساب بانکی
class BankAccount:
    def __init__(self , account_id , username , account_type , blance , is_blocked , last_withdraw):
        self.account_id = account_id
        self.username = username
        self.account_type = account_type
        self.blance = float(blance)
        self.is_blocked = is_blocked
        self.last_withdraw = last_withdraw
#برای انتقال ها
    def record_transaction(self , to_account , amount , transaction_type):
        try:
            with open("transaction.csv" , "a" , newline=) as file:
                writer = csv.writer(file)
                writer.writerow([self.account_id , to_account.account_id , amount , transaction_type , datetime.date.today()])
        except FileNotFoundError:
            return "فایل تراکنش ها یافت نشد"
# برای تغییر موجودی حساب در فاایل ها
    def update_balance(self):
        try:
            with open("accounts.csv" , "r") as file:
                reader = list(csv.reader(file))
            for row in reader:
                if row[0] == self.account_id:
                    row[3] = str(self.balance)
                    break
            with open("accounts.csv", "w" , newline="") as file:
                writer = csv.writer(file)
                writer.writerows(reader) # نوشتن همه ی فایل ها به علاوه ی حساب تغییر کرده
        except FileNotFoundError:
            return "فایل حساب‌ها یافت نشد!"
# برای واریز
    def deposit(self , amount):
        if self.is_blocked == "yes":
            return "حساب مسدود است"
        self.balance += amount
        self.update_balance()
        return f"واریز انجام شد. مانده: {self.balance}"
# برای برداشت
    def withdraw(self , amount):
        if self.is_blocked == "yes":
            return "حساب مسدود است"
        if self.account_type == "پس انداز" :
# اعمال محدودیت برداشت ماهانه
          today = datetime.date.today()
          if self.last_withdraw and (today.month == self.last_withdraw.month):
            return "برداشت ماهانه شما انجام شده است. لطفا ماه بعد اقدام کنید."
# محدودیت برداشت هر باره
          if amount > 5000000:
                return "حداکثر مقدار قابل برداشت از حساب پس انداز ۵ میلیون تومان است."
        if amount > self.balance:
            return "موجودی کافی نیست"
        self.balance -= amount
        self.update_balance()
        self.last_withdraw = today
        return f"برداشت انجام شد. مانده: {self.balance}"
# برای انتقال و کرات به کارت
    def transfer(self , other , amount):
        if self.is_blocked == "yes":
            return "حساب مسدود است"
        if amount > self.balance:
            return "موجودی کافی نیست"
        other.balance += amount
        self.balance -= amount
        self.update_balance()
        other.update_balance()
        self.record_transaction(other.account_id, amount, "انتقال")
        return f"انتقال موفقیت‌آمیز. مانده: {self.balance}"
 # کلاس بانکدار
class Banker:
# ساختن حساب جدید
    def create_account(self,username,account_type):
# ساختن شماره حساب جدید
        with open('accounts.csv','r') as file:
            account_id = 'A' + str(1000 + len(file.readlines()))

        with open('accounts.csv','a',newline='' ) as file:
            writer = csv.writer(file)
            writer.writerow([account_id, username , account_type , 0 , 'no' ])

        return f"حساب جدید ایجاد شد. شماره حساب: {account_id}"

# مسدود کردن حساب
    def block_account(self, account_id):
        accounts = []
        with open("accounts.csv", "r") as file:
           reader = csv.reader(file)
           for row in reader:
                if row[0] == account_id:
                    if row[4] == "yes":
                       return "این حساب از قبل مسدود شده است"  
                    row[4] = "yes"
                accounts.append(row)

        with open("accounts.csv","w",newline="") as file:
           writer = csv.writer(file)
           writer.writerows(accounts)

        return "حساب با موفقیت مسدود شد!"


# مشاهده تراکنش‌ها
    def view_transactions(self):
        try:
            with open("transactions.csv", "r") as file:
                reader = csv.reader(file)
                transactions = list(reader)
                return transactions if transactions else ["هیچ تراکنشی یافت نشد."]
        except FileNotFoundError:
            return ["فایل تراکنش‌ها یافت نشد!"]

# اجرای برنامه
from tkinter import messagebox
class BankAppGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("نرم افزار بانک")
        self.root.geometry("400x300")
        tk.Label(root, text="ورود به سیستم ", font=("Arial", 18)).pack(pady=10)
# برای نام کاربری
        self.username_label = tk.Label(root, text="نام کاربری:")
        self.username_label.pack()
        self.username_entry = tk.Entry(root)
        self.username_entry.pack()
# برای رمز عبور
        self.password_label = tk.Label(root, text="رمز عبور:")
        self.password_label.pack()
        self.password_entry = tk.Entry(root, show="*")
        self.password_entry.pack()

        self.login_button = tk.Button(root, text="ورود", command=self.login)
        self.login_button.pack()

        self.result_label = tk.Label(root, text="")
        self.result_label.pack()

    def login(self):
        username = self.username_entry.get()
        if not username:
          messagebox.showerror("خطا", "لطفا نام کاربری را وارد کنید!")
          return

        messagebox.showinfo("ورود موفقیت آمیز", f"خوش آمدید، {username}")
        self.root.withdraw()
        self.show_dashboard(username)
    def show_dashboard(self,username):
        dashboard = tk.Toplevel()
        dashboard.title("پنل مدیریت بانک")
        dashboard.geometry("400x250")
        tk.Label(dashboard, text=f"پنل کاربری: {username}", font=("Arial", 14)).pack(pady=10)
        tk.Button(dashboard, text="بستن",font=("Arial", 12),command=dashboard.destroy).pack(pady =10)

root = tk.Tk()
BankAppGUI(root)
root.mainloop()       

